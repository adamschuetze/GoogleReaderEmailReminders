/*

--About--

'Google Reader email reminders' is a Google Scripts application that does exactly as you would expect, it
sends you email reminders when the appropriate RSS feeds are updated.

--Credits--

I want to thank Shawn McCollum for writing his excellent article on a PHP implementation of a Google
Reader client, which gave me the idea that it could be possible to access the Google Reader API:

http://mobile.tutsplus.com/tutorials/mobile-web-apps/building-a-mobile-web-application-with-the-google-reader-api/

I also relied heavily on the excellent documention of the Google Reader API in Martin Doms' series 
of articles:

http://blog.martindoms.com/2009/08/15/using-the-google-reader-api-part-1/
http://blog.martindoms.com/2009/08/15/using-the-google-reader-api-part-2/
http://blog.martindoms.com/2009/08/15/using-the-google-reader-api-part-3/

--Functionality--

1.  Create a label such as 'Favorites', and configure the application's user properties (see Installation).
2.  Add that label to any RSS feed in Google Reader, at any time.
2.  The script checks your subscriptions on a schedule you specify, and sends you email reminders of new unread posts in the labeled RSS feeds.

--Installation--

It runs as a script in Google Drive.  To install:

1.  Go to your Google Drive
2.  Click Create>More>Script and create a new blank project.
3.  Delete the boilerplate code that Google pasted into the editing area.
4.  Paste all of this code into the editing area
5.  Give the script a name: change "Untitled project" to something else more memorable.
6.  Click File>Project properties and click on 'User properties' tab.
7.  Define some Properties:

Property: reminderEmail                 Value: <the email address you want reminders sent to>
Property: reminderLabel                 Value: <the label you want to use to mark RSS feeds for reminders>
Property: GoogleUsername                Value: <your Google email address>
Property: GooglePassword                Value: <your Google password>
Property: lastChecked                   Value: <the script will use this variable to keep track of when it last checked RSS feeds for new items. Leave blank.>

8.  Configure how often it runs.  Click Resources>All your triggers, then 'Add a new trigger', and 
    configure to run as often as you want.  

--Notes--

a) If you are using Google two-step authentication, you will need to generate an 
   application-specific password.  In Gmail, click on 'Gear icon'>Settings and select 'Accounts' 
   tab, then click 'Google Account settings', then 'Security', then 'Manage access' under 
   'Connected applications and sites'.  Give the password a label, and click 'Generate password'.  
   Use this password.
b) The first time the script runs, it will initialize the 'lastChecked' User property.  The second time the script 
   runs, it will attempt to send email reminders.
       
--For more information on the Google Reader API--

http://mobile.tutsplus.com/tutorials/mobile-web-apps/building-a-mobile-web-application-with-the-google-reader-api/
http://blog.martindoms.com/2009/08/15/using-the-google-reader-api-part-1/
http://undoc.in/googlereader.html
http://eamann.com/tech/google-reader-api-a-brief-tutorial/

*/

// Used to debug and test the application.
// Creates 'lastChecked' variable with an arbitrary time stamp.
function setStart() {
  //December 22nd, 2012, 6 AM PST (for example)
  var startDate = new Date(2012,11,22,6,0,0,0);
  var startTime = new Number(startDate.valueOf()/1000);
  UserProperties.setProperty('lastChecked',startTime);
}

function sendReminders () {
  //Number of updates to handle, per execution
  var n = 50;
  var userAgent='GoogleReaderEmailReminders';
  var urlApi = 'http://www.google.com/reader/api/0';
  var urlAuth = 'https://www.google.com/accounts/ClientLogin';
  var urlToken = 'https://www.google.com/reader/api/0/token';
  var urlStream = 'https://www.google.com/reader/api/0/stream';
  var authentication=login(UserProperties.getProperty('GoogleUsername'),UserProperties.getProperty('GooglePassword'),urlAuth,urlToken,userAgent);
  if (authentication[0]){
    var lastChecked = new Number(UserProperties.getProperty('lastChecked'));
    var timeNow= new Number(Math.round(Date.now()/1000));
    Logger.log(lastChecked);
    Logger.log(timeNow);
    UserProperties.setProperty('lastChecked',timeNow);
    if (lastChecked != 0) {
      var items=getItemsbyLabel(n, urlStream, userAgent, authentication[1], UserProperties.getProperty('reminderLabel'), lastChecked, timeNow);
      var item_url='';
      var item_title=''
      var item_summary='';
      var item_feedname='';
      var message_body='';
      for (i=0;i<items.length;i++) {  
        item_url=getItemUrl(items[i]);
        item_title=getItemTitle(items[i]);
        item_summary=getItemContent(items[i]);
        item_feedname=getItemFeedname(items[i]);
        message_body=item_feedname+"<br>"+item_title+"<br><a href=\""+item_url+"\">"+item_url+"</a><br><br>"+item_summary;
        GmailApp.sendEmail(UserProperties.getProperty('reminderEmail'), 'New '+item_feedname+' post: '+item_title, '', {noReply:true, htmlBody: message_body});
      }       
    }        
  }
}

// Returns an array of values
// [0] Authentication state (true/false)
// [1] Auth value
// [2] Token value
function login (GoogleUsername,GooglePassword,urlAuth,urlToken,userAgent){
  var authentication=new Array(3);
  var result=postAnonUrl(urlAuth, '&Email='+GoogleUsername+'&Passwd='+GooglePassword+'&service=reader&source='+userAgent);
  var auth_regexp = new RegExp('Auth=(\\S*)');
  if (auth_regexp.test(result)) {
    authentication[0]=true;
    var match=auth_regexp.exec(result);
    authentication[1]=match[1];
    authentication[2]=getUrl(urlToken,authentication[1]);
  } else {
    authentication[0]=false; 
  }
  return authentication;
}

function getItemsbyLabel (n, urlStream, userAgent, auth, label, lastChecked, timeNow) {
  var url=urlStream
    +'/contents/user/-/label/'+label
    +'?ot='+lastChecked
    +'&r=o'
    +'&xt=user/-/state/com.google/read'
    +'&n='+n
    +'&ck='+timeNow
    +'&client='+userAgent
    +'&output=json';
  return (JSON.parse(getUrl(url, auth))).items;
}
                                                   
function getUrl(url,auth) {
  var result = UrlFetchApp.fetch(url, {headers:{Authorization: 'GoogleLogin auth='+auth}});
  return result.getContentText();
  
}

function postAnonUrl(url,data) {
  var result = UrlFetchApp.fetch(url, {method:"post", payload:data});
  return result.getContentText();
}

function getItemUrl (item) {
  return (item.alternate)[0].href;
}

function getItemTitle (item) {
  return item.title; 
}

function getItemContent (item) {
  var summary = '';
  if (typeof item.summary === "undefined" ) {
    summary = item.content.content;
  } else {
    summary = item.summary.content;
  }
  return summary;
}

function getItemFeedname (item) {
  return item.origin.title;
}
